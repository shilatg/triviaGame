package com.example.automaticsecreteryreminder;

import androidx.appcompat.app.AppCompatActivity;

import android.app.Dialog;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import com.google.gson.*;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;

public class PlayScreen extends AppCompatActivity {

    // Declare q as a field of the PlayScreen class
    private Question q;
    private ArrayList<Question> questionList;
    private int currentQuestionIndex = 0;

    public void updateTime() throws InterruptedException { // polling
        // קוד שיקרה בתוך חוט פעם בשניה
        progressBar.setProgress(progressBar.getProgress()+1);
        if(progressBar.getProgress() > 29)
            progressBar.setProgress(0);



        Thread.sleep(1000);
        updateTime();
    }
    Button buttonA,buttonB,buttonC,buttonD;
    ProgressBar progressBar;
    ImageView template;
    TextView question;

    @Override

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_play_screen);
        buttonA = findViewById(R.id.buttonA);
        buttonB = findViewById(R.id.buttonB);
        buttonC = findViewById(R.id.buttonC);
        buttonD = findViewById(R.id.buttonD);
        //template = findViewById(R.id.template);
        Button[] buttons = {buttonA,buttonB,buttonC,buttonD};
        question = findViewById(R.id.questionView);

        Intent intent1 = new Intent(this,PlayScreen.class);
        progressBar = findViewById(R.id.progressBar);

        progressBar.setMax(30);
        progressBar.setMin(0);

        //Gson gson = new Gson();
        String json = null;
        try {
            InputStream inputStream = getBaseContext().getAssets().open("questions.json");
            int size = inputStream.available();
            byte[] buffer = new byte[size];
            inputStream.read(buffer);
            inputStream.close();
            json = new String(buffer, StandardCharsets.UTF_8);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        Log.d("MYTAG", "onCreate: json is: "+json); //V
        GsonBuilder gsonBuilder = new GsonBuilder();
        Gson gson = gsonBuilder.create();
        // לדעת להגיע למצב שהוא מזהה את הגיסון לקריאה אפילו ללוג או טוסט

        Question[] questions = gson.fromJson(json,Question[].class);


        Thread t = new Thread() {
            @Override
            public void run() {
                super.run();
                questionList = loadJson();
                if (!questionList.isEmpty()) {
                    // Assign the first question from the list to currentQuestion
                    q = questionList.get(currentQuestionIndex);

                    // Display the question and options
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            displayQuestion(q);
                        }
                    });
                } else {
                    // Handle case when no questions are loaded
                    Toast.makeText(PlayScreen.this, "No questions loaded", Toast.LENGTH_SHORT).show();
                }


                buttonA.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        checkAnswer(buttonA, q, buttons[q.correctAnswer]);
                        if (buttonA.getText().toString().equals(q.getOptions()[q.correctAnswer])) {
                            currentQuestionIndex++;
                            if (currentQuestionIndex < questionList.size()) {
                                q = questionList.get(currentQuestionIndex);
                                displayQuestion(q);
                            } else {
                                showDialog();

                            }
                        } else {
                            showDialog();
                            MediaPlayer mediaPlayer = MediaPlayer.create(PlayScreen.this, R.raw.lose);
                            mediaPlayer.start();
                        }
                    }
                });

                buttonB.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        checkAnswer(buttonB, q, buttons[q.correctAnswer]);
                        if (buttonB.getText().toString().equals(q.getOptions()[q.correctAnswer])) {
                            currentQuestionIndex++;
                            if (currentQuestionIndex < questionList.size()) {
                                q = questionList.get(currentQuestionIndex);
                                displayQuestion(q);
                            } else {
                                showDialog();
                            }
                        } else {
                            showDialog();
                            MediaPlayer mediaPlayer = MediaPlayer.create(PlayScreen.this, R.raw.lose);
                            mediaPlayer.start();
                        }
                    }
                });


                buttonC.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        checkAnswer(buttonC, q, buttons[q.correctAnswer]);
                        if (buttonC.getText().toString().equals(q.getOptions()[q.correctAnswer])) {
                            currentQuestionIndex++;
                            if (currentQuestionIndex < questionList.size()) {
                                q = questionList.get(currentQuestionIndex);
                                displayQuestion(q);
                            } else {
                                showDialog();
                            }
                        } else {
                            showDialog();
                            MediaPlayer mediaPlayer = MediaPlayer.create(PlayScreen.this, R.raw.lose);
                            mediaPlayer.start();
                        }
                    }
                });

                buttonD.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        checkAnswer(buttonD, q, buttons[q.correctAnswer]);
                        if (buttonD.getText().toString().equals(q.getOptions()[q.correctAnswer])) {
                            currentQuestionIndex++;
                            if (currentQuestionIndex < questionList.size()) {
                                q = questionList.get(currentQuestionIndex);
                                displayQuestion(q);
                            } else {
                                showDialog();
                            }
                        } else {
                            showDialog();
                            MediaPlayer mediaPlayer = MediaPlayer.create(PlayScreen.this, R.raw.lose);
                            mediaPlayer.start();
                        }
                    }
                });

                try {
                    updateTime();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        };

        t.start();



    }

    private void displayQuestion(Question q) {

        // Display the question text
        question.setText(q.getQuestion());

        // Display the options on buttons
        buttonA.setText(q.getOptions()[0]);
        buttonB.setText(q.getOptions()[1]);
        buttonC.setText(q.getOptions()[2]);
        buttonD.setText(q.getOptions()[3]);
    }


    private void checkAnswer(Button clickedButton, Question q, Button correctButton) {
        ColorStateList clickedButtonColorStateList = clickedButton.getTextColors();
        ColorStateList correctButtonColorStateList = correctButton.getTextColors();
        String clickedAnswer = clickedButton.getText().toString();
        if (clickedAnswer.equals(q.getOptions()[q.correctAnswer])) {
            // Correct answer
            clickedButton.setBackgroundColor(getResources().getColor(android.R.color.holo_green_light));
            MediaPlayer mediaPlayer = MediaPlayer.create(PlayScreen.this, R.raw.win);
            mediaPlayer.start();

            // Stop the music after 3 seconds
            Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mediaPlayer.stop();
                    mediaPlayer.release(); // Release resources
                }
            }, 3000); // 3000 milliseconds = 3 seconds
        } else {
            // Wrong answer
            clickedButton.setBackgroundColor(getResources().getColor(android.R.color.holo_red_light));
            correctButton.setBackgroundColor(getResources().getColor(android.R.color.holo_green_light));
        }
        // Revert button colors to default after 1 second
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                clickedButton.setBackgroundResource(android.R.drawable.btn_default);
                correctButton.setBackgroundResource(android.R.drawable.btn_default);
            }
        }, 1000); // 1000 milliseconds = 1 second
    }


    private void showDialog(){
        Dialog dialog = new Dialog(this);
        dialog.setContentView(R.layout.play_screen_lost);

        Button playAgain,backToMain;
        playAgain = dialog.findViewById(R.id.playAgain);
        backToMain = dialog.findViewById(R.id.backToMain);
        dialog.show();
        playAgain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(PlayScreen.this,PlayScreen.class);
                dialog.dismiss();
                startActivity(intent);

            }
        });
        backToMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(PlayScreen.this,MainActivity.class);
                dialog.dismiss();
                startActivity(intent);

            }
        });
        MediaPlayer mediaPlayer = MediaPlayer.create(PlayScreen.this, R.raw.lose);
        mediaPlayer.start();
    }
    public ArrayList<Question> loadJson() {
        ArrayList<Question> questionList = new ArrayList<>();
        try {
            InputStream inputStream = getAssets().open("questions.json");
            int size = inputStream.available();
            byte[] buffer = new byte[size];
            inputStream.read(buffer);
            inputStream.close();

            String jsonString = new String(buffer, StandardCharsets.UTF_8);
            JSONArray jsonArray = new JSONArray(jsonString);
            int numOfQuestions = jsonArray.length();

            for (int i = 0; i < numOfQuestions; i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                String questionText = jsonObject.getString("question");
                JSONArray optionsArray = jsonObject.getJSONArray("options");
                String[] options = new String[optionsArray.length()];
                for (int j = 0; j < optionsArray.length(); j++) {
                    options[j] = optionsArray.getString(j);
                }
                int correctAnswerIndex = jsonObject.getInt("correct_answer");

                // Create Question object
                Question question = new Question(questionText, options, correctAnswerIndex);
                questionList.add(question);
            }
        } catch (IOException e) {
            Log.e("TAG", "Error loading questions from JSON: " + e.getMessage());
            // Handle error or provide user feedback
        } catch (JSONException e) {
            Log.e("TAG", "Error parsing JSON: " + e.getMessage());
            // Handle error or provide user feedback
        }
        return questionList;
    }



}
