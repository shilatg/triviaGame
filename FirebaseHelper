package com.example.automaticsecreteryreminder;

import android.util.Log;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

public class FirebaseHelper {

    FirebaseDatabase database;
    DatabaseReference myRef;

    List<Map<String, String>> dbList;
    List<Map<String, Long>> dbAgesList;
    List<User> userList;

    boolean ready;

    // list of map<string,string>
    public FirebaseHelper(String path) {
        this.database = FirebaseDatabase.getInstance();
        this.myRef = database.getReference(path);
        this.dbList = new ArrayList<>();
        this.userList = new ArrayList<>();
        this.dbAgesList = new ArrayList<>();
        this.ready = false;

        this.fetch();
    }

    public void fetch() {
        ready = false; //each fetch we assume that it's the first fetch!
        // Read from the database
        myRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                // This method is called once with the initial value and again
                // whenever data at this location is updated.
                for (DataSnapshot data : dataSnapshot.getChildren()) { // getChildren -> backend operation
                    // age will not be fetched! , needs a String,Long map just for the age
                    dbList.add((Map<String, String>) data.getValue()); // 3 properties : user,pass,fullname
                    // update : here is the String,Long ages list.
                    dbAgesList.add((Map<String, Long>) data.getValue()); // 1 property : age



                }
                // users should be available..

                // since we need the ages list too, running parallel indexes.
                for (int i = 0; i < dbList.size(); i++) {
                    User temp = new User(dbList.get(i).get("username"), dbList.get(i).get("password"), dbAgesList.get(i).get("age"), dbList.get(i).get("fullname"));
                    Log.d("MYTAG", "onDataChange: " + temp);
                    userList.add(temp);
                }
                ready = true;


            }

            @Override
            public void onCancelled(DatabaseError error) {
                // Failed to read value
                Log.w("TAG", "Failed to read value.", error.toException());
            }
        });
    }

    public FirebaseDatabase getDatabase() {
        return database;
    }

    public void setDatabase(FirebaseDatabase database) {
        this.database = database;
    }

    public DatabaseReference getMyRef() {
        return myRef;
    }

    public void setMyRef(DatabaseReference myRef) {
        this.myRef = myRef;
    }

    //TODO: register user

    public boolean register(User user) {
        // בדיקות

        // שרת : לבדוק שאין כבר משתמש כזה

        if (!exists(user.getUsername())) {
            this.myRef.push().setValue(user);
            return true;
        } else return false;

    }


    public boolean isReady() {
        return ready;
    }


    public User login(String username, String password) {
        if (!this.ready)
            return null;
        for (User user : this.userList) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                Log.d("MYTAG", "login: success for " + user.getUsername());
                return user;
            }
        }
        return null;
    }


    public boolean exists(String username) {
        for (User user : this.userList)
            if (user.getUsername().equals(username)) {
                return true;
            }
        return false;
    }


}

